
use('sample_mflix');

var pipeline = [
    {$match:{ $and:[{languages: {$in: ["Japanese"]}},{languages: {$in: ["English"]}}]}},
    {$match:{ "imdb.rating": {$gte: 7}}},
    {$match:{ $or:[{genres: {$nin: ["Horror", "Crime"]}}]}},
    {$match:{ $or:[{rated: "PG"}, {rated:"G"}]}},
    {$project: {"title": 1, "rated": 1, "_id": 0}},
    {$project: {"title": {$split: [ "$title", " " ] }}},
    {$project: {"title": { $cond: { if: { $size: "$title" }, then: {"$title" }, else: "NA"} }}}
] 

var pipeline = [
        {$project: {"title":{$split: [ "$title", " " ]}}},
        {$project: {size_of_title: {$size: "$title"} }},
        {$match: {"size_of_title": {$eq: 1}}},
        {$project: {"title": 1, "_id": 0 }},
]

db.movies.aggregate(pipeline);

// db.movies.findOne()
 // { $count: "type" }

     db.movies.aggregate([
        {$match: {
          cast: { $elemMatch: { $exists: true }},
          directors: { $elemMatch: { $exists: true }},
          writers: { $elemMatch: { $exists: true }}
        }},
        {$project: {
          _id: 0,
          cast: 1,
          directors: 1,
          writers: {
           $map: {
             input: "$writers",
             as: "writer",
             in: {
               $arrayElemAt: [
                 {
                   $split: ["$$writer", " ("]
                 },
                 0
               ]
             }
           }
         }
       }
      },
      {$project:{"lovejoy":{ $gt: [{$size:{ $setIntersection: [ "$cast", "$writers", "$directors" ]}},0]}}},
      {$match: {"lovejoy": true}},
    ]).itcount()

//chapter 2 lab 1
     db.movies.aggregate([
        {$match: {cast: { $elemMatch: { $exists: true } }}},
        {$match:{ countries: {$in: ["USA"]}}},
        {$match:{ "tomatoes.viewer.rating": {$gte: 3}}},
        {$addFields: {favcast: {$filter:{
            input: "$cast",
            as: "fave",
            cond: {$or: [
              {$eq: ["$$fave", "Sandra Bullock"] },
              {$eq: ["$$fave", "Tom Hanks"] },
              {$eq: ["$$fave", "Julia Roberts"] },
              {$eq: ["$$fave", "Kevin Spacey"] },
              {$eq: ["$$fave", "George Clooney"] },
            ]}
        } } } },
        {$addFields: { num_favs: 
            {$reduce: { 
                input: "$favcast",
                initialValue: {sum: 0},
                in: {
                  sum: { $add : ["$$value.sum", 1] }
                }
              }}
            }},
        {$project: {title: 1, favcast: 1, num_favs: 1, _id: 0 }},
        {$sort: { num_favs: -1, "tomatoes.viewer.rating": -1 , title: -1}},
        {$skip : 20}
    ])
//chapter 2 lab 2
// English is an available language, the minimum imdb.rating is at least 1, 
// the minimum imdb.votes is at least 1, and it was released in 1990 or after. 
// You'll be required to rescale (or normalize) imdb.votes.
     db.movies.aggregate([
       {$match:{ languages: {$in: ["English"]}}},
       {$match:{ year: {$gte: 1990}}},
       {$match:{ "imdb.rating": {$gte: 1}}},
       {$match:{ "imdb.votes": {$gte: 1}}},
       {$addFields:{ norm_rating: {
        $add: [ 1, {
            $multiply: [ 9, {
                $divide: [
                  { $subtract: ["$imdb.votes", 5] },
                  { $subtract: [1521105, 5] }
                ]
              }
            ]
          }
        ]
      }}},
      {$project: {title: 1, norm_rating:{ $avg: ["$norm_rating", "$imdb.rating"] }, _id: 0}},
      {$sort: {norm_rating: 1}},
      {$limit: 5}
    ])

// Chapter 3 lecture: The $group stage
db.movies.aggregate([
  {$match: {"metacritic": {$gte: 0}}},
  {$group: {
    _id: {
      numDirectors: {
        $cond: [{$isArray: "$directors"}, {$size: "$directors"}, 0]
      }},
    numFilms: {$sum: 1},
    averageMetacritic: {$avg: "$metacritic"}
  }},
  {$sort: {"_id.directors": -1}}
])

// Chapter 3 Lab #1: $group and accumlators
// match awards strings containing oscars
// split the string and filter out just the Num of oscars? to a new fields numberOfOscars
// calculate the standard deviation, highest, lowest, and average imdb.rating.
db.movies.aggregate([
  {$addFields: { oscarRewards: { $regexFind: { input: "$awards", regex: /Won (.*) (Oscars|Oscar)/ }}}},
  {$match: {"oscarRewards": {$ne: null}}},
  {$addFields: {oscarRewardsAsNum: {$toInt: {$arrayElemAt: ["$oscarRewards.captures", 0]}}}},
  {$group: {
      _id:null, 
      highest_rating: {$max: "$imdb.rating" },
      lowest_rating: {$min: "$imdb.rating" },
      average_rating: {$avg:"$imdb.rating" },
      deviation: {$stdDevSamp:"$imdb.rating"},
  }},

])

// chapter 3 lab #2: $unwind stage
db.movies.aggregate([
  {$match: {languages: {$in: ['English']}}},
  {$match: {"imdb.rating": {$gt: 0}}},
  {$match: {cast: { $elemMatch: { $exists: true } }}},
  {$unwind: "$cast"},
  {$group:{
    _id: {castMember: "$cast"},
    numFilms: {$sum: 1},
    average: {$avg: "$imdb.rating"}
    }
  },
  {$sort: {"numFilms": -1}}
])

// The $lookup stage aka a left outer join (in sql)
// Ch3 lab #3: Using $lookup
db.air_routes.aggregate([
{$match: {airplane: /747|380/}},
{$lookup: {
  from: "air_alliances",
  localField: "airline.name",
  foreignField: "airlines",
  as: "alliRoutes"
}},
{$group:{
  _id: "$alliRoutes.name",
  total: {$sum: 1}
}}
])

// $graphlookup**
// top down relational structure
db.parent_reference.aggregate([
  { $match: {name: 'Eliot'} },
  { $graphLookup: {
    from: 'parent_reference',
    startWith: '$_id',
    connectFromField: '_id',
    connectToField: 'reports_to',
    as: 'all_reports'
  }}
])
// bottom up relational strcut
db.parent_reference.aggregate([
   { $match: {name: 'Shannon'} },
  { $graphLookup: {
    from: 'parent_reference',
    startWith: '$reports_to',
    connectFromField: 'reports_to',
    connectToField: '_id',
    as: 'all_reports'
  }}
])
// another pattern we can apply is reverse referencing.
db.child_reference.aggregate([
  {$match:{name: 'Dev'}},
  {$graphLookup: {
    from: 'child_reference',
    startWith: '$direct_reports',
    connectFromField: 'direct_reports',
    connectToField: 'name',
    as: 'all_reports'
  }}
])

//ch3 lab4
//Find the list of all possible distinct destinations, with at most one layover,
//departing from the base airports of airlines from Germany, Spain or Canada that
//are part of the "OneWorld" alliance. Include both the destination and which airline
//services that location
//Determine the approach that satisfies the following question in the most efficient manner
db.air_alliances.aggregate([
  {$match: { name: 'OneWorld'}},
  {$graphLookup: {
    from: 'airl_airlines',
    startWith: '$airlines',
    connectFromField: 'name',
    connectToField: 'name',
    as: 'airlines',
    maxDepth: 0,
    restrictSearchWithMatch: {
      country: {$in: ['Germany', 'Spain', 'Canada']}
    }
  }},
  {$graphLookup: {
    from: 'air_routes',
    startWith: '$airlines.base',
    connectFromField: 'dst_airport',
    connectToField: 'src_airport',
    as: 'connections',
    maxDepth: 1
  }},
  {$project: {
    validAirLines: '$airlines.name',
    'connections.dst_airport': 1,
    'connections.airline.name': 1
  }},
  {$unwind: '$connections'},
  {$project: {
    isValid: {$in: ['$connections.airline.name', '$validAirlines']},
    'connections.dst_airport': 1
  }},
  {$match: {isValid: true}},
  {$group: {_id: '$connections.dst_airport'}}
],{allowDiskUse: true})


// Chapter 4. Core aggregations - multidimensional grouping
// lab: How many movies are in both the top ten highest rated movies according to the
// imdb.rating and the metacritic fields? We should get these results with exactly one
// access to the database.. thinking bucket and then sortByCount?
db.movies.aggregate([
  {$match: {$and: [
    { "imdb.rating": {$gte: 0}},
    { "metacritic": {$gte: 0}},
  ]}},
  {$facet: {
    topTenIMDB: [
      {$sort: {"imdb.rating": -1, title: 1}},
      {$limit: 10},
      {$project: {title: 1, 'imdb.rating': 1}},
    ],
    metacriticTop10: [
      {$sort: {"metacritic": -1, title: 1}},
      {$limit: 10},
      {$project: {title: 1, 'metacritic': 1}},
    ],
  }},
  {$project: {topTenIMDB: 1, metacriticTop10: 1, result:{$setIntersection: ['$topTenIMDB', '$metacriticTop10']}}},
])

//some notes//

// in a situation where you want to filter out particular items from an array field you could
// unwind the field and then run a match stage next but this is sub optimal.
var pipeline = [
  {$unwind: {
    'path': '$products',
  }},
  {$match: {
    'products.price': {
      'gt': NumberDecimal('15.00'),
    },
  }},
  // group is a "blocking stage". aka it's expensive and can be slow
  {$group: { 
    _id: '$_id',
    products: {'$push', '$products'}
  }},
];
// better approach is using an array operator. 
// note you can use $set and $addFields interchangably. set is an alias for addFields blah blah blah.
var pipeline = [
  {$addFields: {
    products:{
      '$filter': {
        'input': '$products',
        'as': 'product',
        'cond': {'$gt': ['$$product.price', NumberDecimal('15.00')]},
      }
    },
  }},
];
/*  
One way to recognize if you have this anti-pattern is if your pipeline
contains a $group on a $_id field. Instead, use Array Operators to avoid 
introducing a blocking stage
*/